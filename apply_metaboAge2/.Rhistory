#predictions
p<-predict(gas1,ncomp=2, newdata = gasTest, type = "scores")
pp
p
#predictions
p<-predict(gas1,ncomp=2, newdata = gasTest, type = "response")
#predictions
p<-predict(gas1,ncomp=2, newdata = gasTest, type = "scores")
gas1$scores[,2]
gas1$scores
gas1$scores
gas1$scores[,2]
p
TT <- (gasTest - rep(object$Xmeans, each = nobs)) %*%
object$projection[,comps]
comps<-2
TT <- (gasTest - rep(object$Xmeans, each = nobs)) %*%
gas1$projection[,comps]
TT <- (gasTest - rep(gas1$Xmeans, each = nobs)) %*%
gas1$projection[,comps]
gasTest
newX<-gas1
newX<-gasTrain
nobs <- dim(newX)[1]
TT <- (newX - rep(gas1$Xmeans, each = nobs)) %*%
gas1$projection[,comps]
rep(gas1$Xmeans, each = nobs)
(newX - rep(gas1$Xmeans, each = nobs))
gas1$projection
gas1$projection[,comps]
TT <- (newX - rep(gas1$Xmeans, each = nobs)) %*%
gas1$projection[,comps]
TT <- (newX - rep(gas1$Xmeans, each = nobs)) %*% gas1$projection[,comps]
scores<-predict(gas1,ncomp=2, newdata = gasTest, type = "scores")
comps<-2
newX<-gasTrain
nobs <- dim(newX)[1]
TT <- (newX - rep(gas1$Xmeans, each = nobs)) %*% gas1$projection[,comps]
gas1$projection[,comps]
(newX - rep(gas1$Xmeans, each = nobs))
newX<-model.matrix(gasTrain)
nobs <- dim(newX)[1]
TT <- (newX - rep(gas1$Xmeans, each = nobs)) %*% gas1$projection[,comps]
newX<-model.matrix(gasTrain)
scores<-predict(gas1,ncomp=2, newdata = gasTest, type = "scores")
comps<-2
newX<-model.matrix(gasTrain)
newX<-gasTrain
#predictions
p<-predict(gas1,ncomp=2, newdata = gasTest, type = "response",scale=F)
scores<-predict(gas1,ncomp=2, newdata = gasTest, type = "scores",scale=F)
comps<-2
newX<-gasTrain
nobs <- dim(newX)[1]
TT <- (newX - rep(gas1$Xmeans, each = nobs)) %*% gas1$projection[,comps]
gas1$projection[,comps]
gas1$projection
TT <- (newX - rep(gas1$Xmeans, each = nobs)) %*% gas1$projection
dim(requires numeric/complex matrix/vector arguments)
dim(gas1$projection)
dim((newX - rep(gas1$Xmeans, each = nobs)))
nobs
scores<-predict.mvr(gas1,ncomp=2, newdata = gasTest, type = "scores",scale=F)
scores<-plsr::predict.mvr(gas1,ncomp=2, newdata = gasTest, type = "scores",scale=F)
scores<-pls::predict.mvr(gas1,ncomp=2, newdata = gasTest, type = "scores",scale=F)
scores<-pls:::predict.mvr(gas1,ncomp=2, newdata = gasTest, type = "scores",scale=F)
scores<-predict(gas1,ncomp=2, newdata = gasTest, type = "scores",scale=F)
scores1<-pls:::predict.mvr(gas1,ncomp=2, newdata = gasTest, type = "scores",scale=F)
scores<-predict(gas1,ncomp=2, newdata = gasTest, type = "scores",scale=F)
dim(newX)
TT <- (newX$NIR - rep(gas1$Xmeans, each = nobs)) %*% gas1$projection[,comps]
TT
scores<-pls:::predict.mvr(gas1,ncomp=2, newdata = gasTest, type = "scores",scale=F)
comps<-2
newX<-gasTrain
nobs <- dim(newX)[1]
TT <- (newX$NIR - rep(gas1$Xmeans, each = nobs)) %*% gas1$projection[,comps]
dim(gasTrain)
#Calculate the scores
scores<-pls:::predict.mvr(gas1,ncomp=2, newdata = gasTest, type = "scores",scale=F)
comps<-2
newX<-gasTest
nobs <- dim(newX)[1]
TT <- (newX$NIR - rep(gas1$Xmeans, each = nobs)) %*% gas1$projection[,comps]
#predictions
p<-predict(gas1,ncomp=2, newdata = gasTest, type = "response",scale=F, method="simpls")
#Calculate the scores
scores<-pls:::predict.mvr(gas1,ncomp=2, newdata = gasTest, type = "scores",scale=F)
comps<-2
newX<-gasTest
nobs <- dim(newX)[1]
TT <- (newX$NIR - rep(gas1$Xmeans, each = nobs)) %*% gas1$projection[,comps]
# Evaluations RMSE and R2
R2(gas1)
# Evaluations RMSE and R2
a<-R2(gas1)
a
View(a)
a[["val"]]
a[["val"]][1]
a[["val"]][5]
#Calculate predictions and scores by hand
#settings of the test set
comps<-2
newX<-gasTest
nobs <- dim(newX)[1]
#Calculate predictions
B<-rowSums(coef(gas2, comps = 10), dims = 2)
B0 <- object$Ymeans - object$Xmeans %*% B
pred <- newX %*% B + rep(B0, each = nobs)
#Calculate predictions
B<-rowSums(coef(gas1, comps = 10), dims = 2)
#Calculate predictions
B<-rowSums(coef(gas1, comps = 10), dims = 2)
B0 <- gas1$Ymeans - gas1$Xmeans %*% B
pred <- newX %*% B + rep(B0, each = nobs)
newX<-gasTest$NIR
nobs <- dim(newX)[1]
#Calculate predictions
B<-rowSums(coef(gas1, comps = 10), dims = 2)
B0 <- gas1$Ymeans - gas1$Xmeans %*% B
pred <- newX %*% B + rep(B0, each = nobs)
#Calculate scores by hand
TT <- (newX - rep(gas1$Xmeans, each = nobs)) %*% gas1$projection[,comps]
pred_by_hand <- newX %*% B + rep(B0, each = nobs)
#predictions
p<-predict(gas1,ncomp=2, newdata = gasTest, type = "response",scale=F, method="simpls")
pred
p_by_nad
p_by_hand
pred_by_hand
#predictions
pred<-predict(gas1,ncomp=2, newdata = gasTest, type = "response",scale=F, method="simpls")
pred
pred_by_hand
#Calculate predictions
B<-rowSums(coef(gas1, comps = comps), dims = 2)
B0 <- gas1$Ymeans - gas1$Xmeans %*% B
pred_by_hand <- newX %*% B + rep(B0, each = nobs)
pred_by_hand
pred
is.na(newX)
which(is.na(newX))
which(is.na(gasoline))
which(is.na(gasoline$octane))
which(is.na(gasoline$NIR))
library(pls)
data(gasoline)
gasTrain <- gasoline[1:50,]
gasTest <- gasoline[51:60,]
gas1 <- plsr(octane ~ NIR, ncomp = 10, data = gasTrain, validation = "CV", method="simpls",segments = 5)
summary(gas1)
#Validation results are the RMSE
plot(RMSEP(gas1), legendpos = "topright")
#predictions
pred<-predict(gas1, ncomp=2, newdata = gasTest, type = "response", scale=F, method="simpls")
#Calculate the scores
scores<-pls:::predict.mvr(gas1, ncomp=2, newdata = gasTest, type = "scores",scale=F)
library(pls)
data(gasoline)
gasTrain <- gasoline[1:50,]
gasTest <- gasoline[51:60,]
gas1 <- plsr(octane ~ NIR, ncomp = 10, data = gasTrain, validation = "CV", method="simpls",segments = 5)
summary(gas1)
#predictions
pred<-predict(gas1, ncomp=2, newdata = gasTest, type = "response", scale=F, method="simpls")
#Calculate the scores
scores<-pls:::predict.mvr(gas1, ncomp=2, newdata = gasTest, type = "scores",scale=F)
#Calculate predictions and scores by hand
#settings of the test set
comps<-2
newX<-gasTest$NIR
nobs <- dim(newX)[1]
#Calculate predictions
B<-rowSums(coef(gas1, comps = comps), dims = 2)
B0 <- gas1$Ymeans - gas1$Xmeans %*% B
pred_by_hand <- newX %*% B + rep(B0, each = nobs)
pred
pred_by_hand
gas1 <- plsr(octane ~ NIR, ncomp = 10, data = gasTrain, validation = "CV", method="simpls", scale=F, segments = 5)
summary(gas1)
#predictions
pred<-predict(gas1, ncomp=2, newdata = gasTest, type = "response", scale=F, method="simpls")
#Calculate the scores
scores<-pls:::predict.mvr(gas1, ncomp=2, newdata = gasTest, type = "scores",scale=F)
#Calculate predictions and scores by hand
#settings of the test set
comps<-2
newX<-gasTest$NIR
nobs <- dim(newX)[1]
#Calculate predictions
B<-rowSums(coef(gas1, comps = comps), dims = 2)
B0 <- gas1$Ymeans - gas1$Xmeans %*% B
pred_by_hand <- newX %*% B + rep(B0, each = nobs)
#Calculate scores by hand
TT <- (newX - rep(gas1$Xmeans, each = nobs)) %*% gas1$projection[,comps]
#Calculate predictions and scores by hand
#settings of the test set
comps<-3
newX<-gasTest$NIR
nobs <- dim(newX)[1]
#Calculate predictions
B<-rowSums(coef(gas1, comps = comps), dims = 2)
B0 <- gas1$Ymeans - gas1$Xmeans %*% B
pred_by_hand <- newX %*% B + rep(B0, each = nobs)
coef(gas1, comps = comps)
coef(gas1, comps = 3)
coef(gas1, comps = 2)
coef(gas1)
View(B)
View(B)
64/6
64/8
32/4
32/6
View(gas1)
summary(gas1)
###############
# Validation #
###############
#Validation results are the RMSE
plot(RMSEP(gas1), legendpos = "topright")
# Evaluations RMSE and R2
a<-R2(gas1)
a
# Evaluations RMSE and R2
R2(gas1)
eval_prediction_continuous<--function(x, pred, log_file=FALSE, save){
RMSE<-sqrt(mean((pred - x)^2,na.rm=T)) #RMSE
rsq <- cor(x, pred, use="pairwise.complete.obs")^2 #Rsquared
c <- cor(x, pred, use="pairwise.complete.obs")
med_err<-median(abs(pred - x), na.rm=T) #Median Absolute Error
if (save){
cat(paste("\nThe RMSE of the predictions is:", RMSE),
file=log_file, append=TRUE)
cat(paste("\nThe Rsquared of the predictions is:", rsq),
file=log_file, append=TRUE)
cat(paste("\nThe median absolut error of the predictions is:", med_err),
file=log_file, append=TRUE)
}
a<-data.frame(RMSE=RMSE,Med_err=med_err,R=c,RSQ=rsq)
colnames(a)[c(3,4)]<-c("R","RSQ")
return(a)
}
eval_prediction_continuous<-function(x, pred, log_file=FALSE, save){
RMSE<-sqrt(mean((pred - x)^2,na.rm=T)) #RMSE
rsq <- cor(x, pred, use="pairwise.complete.obs")^2 #Rsquared
c <- cor(x, pred, use="pairwise.complete.obs")
med_err<-median(abs(pred - x), na.rm=T) #Median Absolute Error
if (save){
cat(paste("\nThe RMSE of the predictions is:", RMSE),
file=log_file, append=TRUE)
cat(paste("\nThe Rsquared of the predictions is:", rsq),
file=log_file, append=TRUE)
cat(paste("\nThe median absolut error of the predictions is:", med_err),
file=log_file, append=TRUE)
}
a<-data.frame(RMSE=RMSE,Med_err=med_err,R=c,RSQ=rsq)
colnames(a)[c(3,4)]<-c("R","RSQ")
return(a)
}
?R2
# Evaluations RMSE and R2
R2(gas1, newdata=gasTest$NIR)
# Evaluations RMSE and R2
R2(gas1, newdata=gasTest)
eval_prediction_continuous(gasTest$octane, pred)
eval_prediction_continuous(gasTest$octane, pred,save=F)
# Evaluations RMSE and R2
R2(gas1, newdata=gasTest, ncomp=comps)
eval_prediction_continuous(gasTest$octane, pred, save=F)
RMSE(gas1, newdata=gasTest, ncomp=comps)
RMSEP(gas1, newdata=gasTest, ncomp=comps)
# Evaluations RMSE and R2
R2(gas1, newdata=gasTest, ncomp=comps)
RMSEP(gas1, newdata=gasTest, ncomp=comps)
eval_prediction_continuous(gasTest$octane, pred, save=F)
gas1 <- plsr(octane ~ NIR, ncomp = 10, data = gasTrain, validation = "CV",
method="simpls", scale=F, segments = 5, model=F)
View(gas1)
R2(gas1, newdata=gasTest)
R2(gas1, newdata=gasTest)
gas2 <- plsr(octane ~ NIR, ncomp = 20, data = gasTrain, validation = "CV",
method="simpls", scale=F, segments = 5, model=F)
R2(gas2, newdata=gasTest, ncomp=comps)
gas3 <- plsr(octane ~ NIR, ncomp = 50, data = gasTrain, validation = "CV",
method="simpls", scale=F, segments = 5, model=F)
R2(gas3, newdata=gasTest, ncomp=comps)
gas2 <- plsr(octane ~ NIR, ncomp = 20, data = gasTrain, validation = "CV",
method="simpls", scale=F, segments = 5, model=F)
R2(gas2, newdata=gasTest, ncomp=comps)
gas3 <- plsr(octane ~ NIR, ncomp = 50, data = gasTrain, validation = "CV",
method="simpls", scale=F, segments = 5, model=F)
gas3 <- plsr(octane ~ NIR, ncomp = 30, data = gasTrain, validation = "CV",
method="simpls", scale=F, segments = 5, model=F)
R2(gas3, newdata=gasTest, ncomp=comps)
summary(gas1)
summary(gas2)
summary(gas3)
summary(gas1,what="validation")
summary(gas2,what="validation")
summary(gas3,what="validation")
summary(gas1,what="training")
summary(gas2,what="training")
summary(gas3,what="training")
which.max(R2(gas1, newdata=gasTest))
which.max(R2(gas1, newdata=gasTest)[["val"]])
which.max(R2(gas1, newdata=gasTest)[["val"]])
which.max(R2(gas2, newdata=gasTest)[["val"]])
which.max(R2(gas3, newdata=gasTest)[["val"]])
R2(gas1, newdata=gasTest)
R2(gas2, newdata=gasTest)
R2(gas3, newdata=gasTest)
which.max(RMSEP(gas3, newdata=gasTest)[["val"]])
which.max(RMSEP(gas1, newdata=gasTest)[["val"]])
which.max(RMSEP(gas2, newdata=gasTest)[["val"]])
which.max(RMSEP(gas3, newdata=gasTest)[["val"]])
RMSEP(gas1, newdata=gasTest)
which.min(RMSEP(gas1, newdata=gasTest)[["val"]])
which.min(RMSEP(gas2, newdata=gasTest)[["val"]])
which.min(RMSEP(gas3, newdata=gasTest)[["val"]])
View(gas1)
7*8
gas3 <- plsr(octane ~ NIR, ncomp = 30, data = gasTrain,
method="simpls", scale=F, segments = 5, model=F)
summary(gas3,what="training")
R2(gas3, newdata=gasTest)
R2(gas1, newdata=gasTest)
R2(gas2, newdata=gasTest)
R2(gas3, newdata=gasTest)
plot(R2(gas1, newdata=gasTest))
plot(R2(gas1))
plot(R2(gas2, newdata=gasTest))
plot(R2(gas3, newdata=gasTest))
eval_prediction_continuous(gasTest$octane, pred, save=F)
# Evaluations RMSE and R2
R2(gas1, newdata=gasTest, ncomp=comps)
RMSEP(gas1, newdata=gasTest, ncomp=comps)
67/2
67+33
library(readr)
datMiniAnnotation3_Gold <- read_csv("Desktop/LUMC/Metabocpg/Other_clocks/DNAmGrimAgePythonCode/input/datMiniAnnotation3_Gold.csv")
View(datMiniAnnotation3_Gold)
#
gold=read.csv('DNAmGrimAgePythonCode/input/datMiniAnnotation3_Gold.csv')
library(readr)
datMiniAnnotation3_Gold <- read_csv("Desktop/LUMC/Metabocpg/Other_clocks/DNAmGrimAgePythonCode/input/datMiniAnnotation3_Gold.csv")
View(datMiniAnnotation3_Gold)
library(readr)
mymetharray_long_permu_data2_ReplaceNA_byGold <- read_csv("Desktop/LUMC/Metabocpg/Other_clocks/DNAmGrimAgePythonCode/input/mymetharray_long_permu_data2_ReplaceNA_byGold.csv")
View(mymetharray_long_permu_data2_ReplaceNA_byGold)
colnames(mymetharray_long_permu_data2_ReplaceNA_byGold)[-c(1,2,3)]
cpgs<-colnames(mymetharray_long_permu_data2_ReplaceNA_byGold)[-c(1,2,3)]
setdiff(cpgs, datMiniAnnotation3_Gold)
setdiff(cpgs, datMiniAnnotation3_Gold$CpG)
View(mymetharray_long_permu_data2_ReplaceNA_byGold)
2413+603
2413+603+668
3684/5
(3684/5)*4
version
BiocManager::install("methylclock")
library(methylclock)
BiocManager::install("methylclock") #When R>=4.1
Complete_Betas_with_fullVUNTR <- readRDS("~/Desktop/LUMC/Metabocpg/Data/Complete_Betas_with_fullVUNTR.rds")
Complete_Betas_with_fullVUNTR <- readRDS("~/Desktop/LUMC/Metabocpg/Data/Complete_Betas_with_fullVUNTR.rds")
biobank                      sex                      age
# Read EWAS Catalog data
EWAS_Catalog_results<-read.table("ewascatalog-results.txt",row.names=NULL, header=T, sep="\t", fill=T)
EWAS_Catalog_studies<-read.table("ewascatalog-studies.txt",row.names=NULL, header=T, sep="\t", fill=T)
#set working directory
setwd("~/Desktop/LUMC/Metabocpg/Data/EWAS")
# Read EWAS Atlas data
EWAS_Atlas<-read.table("EWAS_Atlas_associations.tsv",row.names=NULL, header=T, sep="\t", fill=T)
# Read EWAS Catalog data
EWAS_Catalog_results<-read.table("ewascatalog-results.txt",row.names=NULL, header=T, sep="\t", fill=T)
EWAS_Catalog_studies<-read.table("ewascatalog-studies.txt",row.names=NULL, header=T, sep="\t", fill=T)
View(EWAS_Atlas)
View(EWAS_Catalog_results)
EWAS_Catalog_results$P
which(EWAS_Catalog_results$P>0.005)
MiMIR::PARAM_surrogates$mean
length(MiMIR::PARAM_surrogates$mean)
length(MiMIR::PARAM_MetaboAge$mean)
length(MiMIR::PARAM_metaboAge)
length(MiMIR::PARAM_metaboAge$MEAN)
MiMIR::PARAM_metaboAge$MEAN
MiMIR::PARAM_metaboAge$MEAN
MiMIR::PARAM_surrogates$mean
require(msm)
require(qqman)
563+30+94
563+30+94+200+200
7255.47-5618.95
3018-1636
4+350+15+6+950+8+1-+4+1+2+7+5.6+25+5+59+77+3.95+2.5+45+1.5+5+4.5+6.5+40
MiMIR::MetaboWAS()
?MiMIR::MetaboWAS()
MiMIR::startApp()
?MiMIR::MetaboWAS()
library(MiMIR)
metabolic_measures<-synthetic_metabolic_dataset
phenotypes<-synthetic_phenotypic_dataset
MetaboWAS(met=metabolic_measures, pheno=phenotypes, test_variable = "age", covariates="sex")
met=metabolic_measures
test_variables="age"
covariates="sex"
res<-do_metabowas(phen=pheno, dat= met, test_variable = test_variable, covariates=covariates, adj_method=adj_method)
pheno=phenotypes
res<-do_metabowas(phen=pheno, dat= met, test_variable = test_variable, covariates=covariates, adj_method=adj_method)
test_variable="age"
res<-do_metabowas(phen=pheno, dat= met, test_variable = test_variable, covariates=covariates, adj_method=adj_method)
adj_method="BH"
img=TRUE
res<-do_metabowas(phen=pheno, dat= met, test_variable = test_variable, covariates=covariates, adj_method=adj_method)
res
N_hits<-length(which(res$pval.adj<=0.05))
metabo_names_translator<-MiMIR::metabo_names_translator[which(!is.na(MiMIR::metabo_names_translator$BBMRI_names)),]
res<-res[MiMIR::metabo_names_translator$BBMRI_names,]
res$groups<-MiMIR::metabo_names_translator$group
res$ord<-1:dim(res)[1]
res$met_name<-rownames(res)
phen=pheno
dat= met
test_variable = test_variable
covariates=covariates
adj_method=adj_method
if(!is.null(covariates)){
vars <- phen[, c(test_variable, covariates)]
}else{
vars <- as.data.frame(phen[,test_variable])
rownames(vars)<-rownames(phen)
colnames(vars)<-test_variable
}
vars <- stats:: na.omit(vars)
if(!quiet){
print(paste("The number of samples is:",dim(vars)[1]))
}
dat <- dat[match(rownames(vars), rownames(dat)),]
allmisscols <- sapply(dat, function(x)all(is.na(x)))
dat<-dat[,-which(allmisscols==T)]
data<-merge(vars,dat,by=0)
rownames(data)<-data$Row.names
data<-data[,-1]
fit<-foreach::foreach(i=colnames(dat), .combine="rbind") %do% {
res <-data.frame(stats::coefficients(summary(stats::lm(stats::as.formula(paste0(test_variable,"~",paste(covariates,collapse="+"),"+",i)), data))))
colnames(res) <- c("estimate","stdErr","tstat","pval")
res<-res[,c("estimate","tstat","pval")]
return(res[i,])
}
fit$pval.adj<-stats::p.adjust(fit$pval, method = adj_method)
dim(met)
rownames(met)
rownames(phen)
rownames(phen)<-NULL
if(!is.null(covariates)){
vars <- phen[, c(test_variable, covariates)]
}else{
vars <- as.data.frame(phen[,test_variable])
rownames(vars)<-rownames(phen)
colnames(vars)<-test_variable
}
View(vars)
vars <- stats:: na.omit(vars)
if(!quiet){
print(paste("The number of samples is:",dim(vars)[1]))
}
dat <- dat[match(rownames(vars), rownames(dat)),]
allmisscols <- sapply(dat, function(x)all(is.na(x)))
dat<-dat[,-which(allmisscols==T)]
data<-merge(vars,dat,by=0)
rownames(data)<-data$Row.names
data<-data[,-1]
fit<-foreach::foreach(i=colnames(dat), .combine="rbind") %do% {
res <-data.frame(stats::coefficients(summary(stats::lm(stats::as.formula(paste0(test_variable,"~",paste(covariates,collapse="+"),"+",i)), data))))
colnames(res) <- c("estimate","stdErr","tstat","pval")
res<-res[,c("estimate","tstat","pval")]
return(res[i,])
}
fit$pval.adj<-stats::p.adjust(fit$pval, method = adj_method)
fit<-fit[order(fit$pval.adj, decreasing = F),]
MetaboWAS(met=metabolic_measures, pheno=phenotypes, test_variable = "age", covariates="sex")
metabo_names_translator<-MiMIR::metabo_names_translator[which(!is.na(MiMIR::metabo_names_translator$BBMRI_names)),]
res<-res[MiMIR::metabo_names_translator$BBMRI_names,]
res$groups<-MiMIR::metabo_names_translator$group
res$ord<-1:dim(res)[1]
res$met_name<-rownames(res)
axis_set <- res %>%
group_by(groups) %>%
summarise(center = mean(ord))
View(axis_set)
View(axis_set)
load("~/Desktop/LUMC/metaboAge/MetaboAge2/apply_metaboAge2/PARAM_MetaboAge2_2022_04_26.RData")
library(readxl)
Units_for_requantified_metabolites <- read_excel("~/Desktop/LUMC/metaboAge/MetaboAge2/apply_metaboAge2/Units_for_requantified_metabolites.xlsx")
View(Units_for_requantified_metabolites)
load("~/Desktop/LUMC/metaboAge/MetaboAge2/apply_metaboAge2/PARAM_MetaboAge2_2022_04_26.RData")
load("~/Desktop/LUMC/metaboAge/MetaboAge2/apply_metaboAge2_old_version/PARAM_MetaboAge2_2022_04_26.RData")
#Load the PARAMETERS to compute the metaboAge
PARAM_MetaboAge2<-readRDS("PARAM_MetaboAge2_2022_04_26.RData")
#Set the right path to where the scripts are:
setwd("~/Desktop/LUMC/metaboAge/MetaboAge2/apply_metaboAge2")
#Load the functions
source('functions_metaboAge2.R')
#Load the PARAMETERS to compute the metaboAge
PARAM_MetaboAge2<-readRDS("PARAM_MetaboAge2_2022_04_26.RData")
View(PARAM_MetaboAge2)
PARAM_MetaboAge2[["BBMRI_mean"]]
2358-1215
1143/2
1215+571.5
360-25
